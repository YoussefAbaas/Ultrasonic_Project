
Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000231c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000231c  000023b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800076  00800076  000023c6  2**0
                  ALLOC
  3 .stab         00001cd4  00000000  00000000  000023c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e10  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000519b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000082e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000093e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000096a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 10 	call	0x20ce	; 0x20ce <main>
      8a:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Ultrasonic_init>:
 *Initialize the ICU driver as required.
 *Setup the ICU call back function.
 *Setup the direction for the trigger pin as output pin through the GPIO driver.
 */
void Ultrasonic_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Ultrasonic_init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType Icu_config={F_CPU_8,RISING};
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8a 83       	std	Y+2, r24	; 0x02
	Icu_init(&Icu_config); /*initialize Icu unit8*/
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <Icu_init>
	/*setup call back*/
	Icu_setCallBack(Ultrasonic_edgeProcessing);
     cb8:	8e e5       	ldi	r24, 0x5E	; 94
     cba:	97 e0       	ldi	r25, 0x07	; 7
     cbc:	0e 94 48 0b 	call	0x1690	; 0x1690 <Icu_setCallBack>
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, PIN_OUTPUT);/*setup trigger */
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	65 e0       	ldi	r22, 0x05	; 5
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN, PIN_INPUT);/*setup echo */
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	66 e0       	ldi	r22, 0x06	; 6
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_setupPinDirection>
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <Ultrasonic_Trigger>:

/*
 * Description: Send the Trigger pulse to the ultrasonic.
 */
void Ultrasonic_Trigger(void)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	68 97       	sbiw	r28, 0x18	; 24
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_HIGH);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	65 e0       	ldi	r22, 0x05	; 5
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e2       	ldi	r26, 0x20	; 32
     d02:	b1 e4       	ldi	r27, 0x41	; 65
     d04:	8d 8b       	std	Y+21, r24	; 0x15
     d06:	9e 8b       	std	Y+22, r25	; 0x16
     d08:	af 8b       	std	Y+23, r26	; 0x17
     d0a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d0c:	6d 89       	ldd	r22, Y+21	; 0x15
     d0e:	7e 89       	ldd	r23, Y+22	; 0x16
     d10:	8f 89       	ldd	r24, Y+23	; 0x17
     d12:	98 8d       	ldd	r25, Y+24	; 0x18
     d14:	2b ea       	ldi	r18, 0xAB	; 171
     d16:	3a ea       	ldi	r19, 0xAA	; 170
     d18:	4a ea       	ldi	r20, 0xAA	; 170
     d1a:	5e e3       	ldi	r21, 0x3E	; 62
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	89 8b       	std	Y+17, r24	; 0x11
     d26:	9a 8b       	std	Y+18, r25	; 0x12
     d28:	ab 8b       	std	Y+19, r26	; 0x13
     d2a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d2c:	69 89       	ldd	r22, Y+17	; 0x11
     d2e:	7a 89       	ldd	r23, Y+18	; 0x12
     d30:	8b 89       	ldd	r24, Y+19	; 0x13
     d32:	9c 89       	ldd	r25, Y+20	; 0x14
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d40:	88 23       	and	r24, r24
     d42:	1c f4       	brge	.+6      	; 0xd4a <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	88 8b       	std	Y+16, r24	; 0x10
     d48:	91 c0       	rjmp	.+290    	; 0xe6c <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
     d4a:	69 89       	ldd	r22, Y+17	; 0x11
     d4c:	7a 89       	ldd	r23, Y+18	; 0x12
     d4e:	8b 89       	ldd	r24, Y+19	; 0x13
     d50:	9c 89       	ldd	r25, Y+20	; 0x14
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	53 e4       	ldi	r21, 0x43	; 67
     d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	0c f0       	brlt	.+2      	; 0xd64 <Ultrasonic_Trigger+0x86>
     d62:	7b c0       	rjmp	.+246    	; 0xe5a <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
     d64:	6d 89       	ldd	r22, Y+21	; 0x15
     d66:	7e 89       	ldd	r23, Y+22	; 0x16
     d68:	8f 89       	ldd	r24, Y+23	; 0x17
     d6a:	98 8d       	ldd	r25, Y+24	; 0x18
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a e7       	ldi	r20, 0x7A	; 122
     d72:	54 e4       	ldi	r21, 0x44	; 68
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8c 87       	std	Y+12, r24	; 0x0c
     d7e:	9d 87       	std	Y+13, r25	; 0x0d
     d80:	ae 87       	std	Y+14, r26	; 0x0e
     d82:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d84:	6c 85       	ldd	r22, Y+12	; 0x0c
     d86:	7d 85       	ldd	r23, Y+13	; 0x0d
     d88:	8e 85       	ldd	r24, Y+14	; 0x0e
     d8a:	9f 85       	ldd	r25, Y+15	; 0x0f
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	4a e7       	ldi	r20, 0x7A	; 122
     d92:	53 e4       	ldi	r21, 0x43	; 67
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	88 87       	std	Y+8, r24	; 0x08
     d9e:	99 87       	std	Y+9, r25	; 0x09
     da0:	aa 87       	std	Y+10, r26	; 0x0a
     da2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     da4:	68 85       	ldd	r22, Y+8	; 0x08
     da6:	79 85       	ldd	r23, Y+9	; 0x09
     da8:	8a 85       	ldd	r24, Y+10	; 0x0a
     daa:	9b 85       	ldd	r25, Y+11	; 0x0b
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e8       	ldi	r20, 0x80	; 128
     db2:	5f e3       	ldi	r21, 0x3F	; 63
     db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     db8:	88 23       	and	r24, r24
     dba:	2c f4       	brge	.+10     	; 0xdc6 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9f 83       	std	Y+7, r25	; 0x07
     dc2:	8e 83       	std	Y+6, r24	; 0x06
     dc4:	3f c0       	rjmp	.+126    	; 0xe44 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
     dc6:	68 85       	ldd	r22, Y+8	; 0x08
     dc8:	79 85       	ldd	r23, Y+9	; 0x09
     dca:	8a 85       	ldd	r24, Y+10	; 0x0a
     dcc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	3f ef       	ldi	r19, 0xFF	; 255
     dd2:	4f e7       	ldi	r20, 0x7F	; 127
     dd4:	57 e4       	ldi	r21, 0x47	; 71
     dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dda:	18 16       	cp	r1, r24
     ddc:	4c f5       	brge	.+82     	; 0xe30 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dde:	6c 85       	ldd	r22, Y+12	; 0x0c
     de0:	7d 85       	ldd	r23, Y+13	; 0x0d
     de2:	8e 85       	ldd	r24, Y+14	; 0x0e
     de4:	9f 85       	ldd	r25, Y+15	; 0x0f
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e2       	ldi	r20, 0x20	; 32
     dec:	51 e4       	ldi	r21, 0x41	; 65
     dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	9f 83       	std	Y+7, r25	; 0x07
     e04:	8e 83       	std	Y+6, r24	; 0x06
     e06:	0f c0       	rjmp	.+30     	; 0xe26 <Ultrasonic_Trigger+0x148>
     e08:	89 e1       	ldi	r24, 0x19	; 25
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	9d 83       	std	Y+5, r25	; 0x05
     e0e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <Ultrasonic_Trigger+0x136>
     e18:	9d 83       	std	Y+5, r25	; 0x05
     e1a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1c:	8e 81       	ldd	r24, Y+6	; 0x06
     e1e:	9f 81       	ldd	r25, Y+7	; 0x07
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	9f 83       	std	Y+7, r25	; 0x07
     e24:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e26:	8e 81       	ldd	r24, Y+6	; 0x06
     e28:	9f 81       	ldd	r25, Y+7	; 0x07
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	69 f7       	brne	.-38     	; 0xe08 <Ultrasonic_Trigger+0x12a>
     e2e:	24 c0       	rjmp	.+72     	; 0xe78 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e30:	68 85       	ldd	r22, Y+8	; 0x08
     e32:	79 85       	ldd	r23, Y+9	; 0x09
     e34:	8a 85       	ldd	r24, Y+10	; 0x0a
     e36:	9b 85       	ldd	r25, Y+11	; 0x0b
     e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	9f 83       	std	Y+7, r25	; 0x07
     e42:	8e 83       	std	Y+6, r24	; 0x06
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <Ultrasonic_Trigger+0x172>
     e54:	9b 83       	std	Y+3, r25	; 0x03
     e56:	8a 83       	std	Y+2, r24	; 0x02
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e5a:	69 89       	ldd	r22, Y+17	; 0x11
     e5c:	7a 89       	ldd	r23, Y+18	; 0x12
     e5e:	8b 89       	ldd	r24, Y+19	; 0x13
     e60:	9c 89       	ldd	r25, Y+20	; 0x14
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	88 8b       	std	Y+16, r24	; 0x10
     e6c:	88 89       	ldd	r24, Y+16	; 0x10
     e6e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	8a 95       	dec	r24
     e74:	f1 f7       	brne	.-4      	; 0xe72 <Ultrasonic_Trigger+0x194>
     e76:	89 83       	std	Y+1, r24	; 0x01
_delay_us(10);
GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	65 e0       	ldi	r22, 0x05	; 5
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
}
     e82:	68 96       	adiw	r28, 0x18	; 24
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <Ultrasonic_readDistance>:
 Description
 Send the trigger pulse by using Ultrasonic_Trigger function.
 Start the measurements by the ICU from this moment.
 */
uint16 Ultrasonic_readDistance(void)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
Ultrasonic_Trigger();
     e9c:	0e 94 6f 06 	call	0xcde	; 0xcde <Ultrasonic_Trigger>
sensor_work=1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	80 93 77 00 	sts	0x0077, r24
return (uint16)timer_value;
     ea6:	80 91 7a 00 	lds	r24, 0x007A
     eaa:	90 91 7b 00 	lds	r25, 0x007B
     eae:	a0 91 7c 00 	lds	r26, 0x007C
     eb2:	b0 91 7d 00 	lds	r27, 0x007D
}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <Ultrasonic_edgeProcessing>:
void Ultrasonic_edgeProcessing(void)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	if(sensor_work)
     ec4:	80 91 77 00 	lds	r24, 0x0077
     ec8:	88 23       	and	r24, r24
     eca:	29 f1       	breq	.+74     	; 0xf16 <Ultrasonic_edgeProcessing+0x5a>
	{
	timer_counter++;
     ecc:	80 91 76 00 	lds	r24, 0x0076
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 76 00 	sts	0x0076, r24
	if(timer_counter==1)
     ed6:	80 91 76 00 	lds	r24, 0x0076
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	31 f4       	brne	.+12     	; 0xeea <Ultrasonic_edgeProcessing+0x2e>
	{
		/*
				 * Clear the timer counter register to start measurements from the
				 * first detected rising edge
				 */
				Icu_clearTimerValue();
     ede:	0e 94 84 0b 	call	0x1708	; 0x1708 <Icu_clearTimerValue>
				/* Detect falling edge */
				Icu_setEdgeDetectionType(FALLING);
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Icu_setEdgeDetectionType>
     ee8:	16 c0       	rjmp	.+44     	; 0xf16 <Ultrasonic_edgeProcessing+0x5a>
	}
	else if(timer_counter==2)
     eea:	80 91 76 00 	lds	r24, 0x0076
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	91 f4       	brne	.+36     	; 0xf16 <Ultrasonic_edgeProcessing+0x5a>
	{
		/* get value of ICR register that contains pulse time*/
		timer_value=Icu_getInputCaptureValue();
     ef2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <Icu_getInputCaptureValue>
     ef6:	cc 01       	movw	r24, r24
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	80 93 7a 00 	sts	0x007A, r24
     f00:	90 93 7b 00 	sts	0x007B, r25
     f04:	a0 93 7c 00 	sts	0x007C, r26
     f08:	b0 93 7d 00 	sts	0x007D, r27
		/* Detect rising edge*/
		Icu_setEdgeDetectionType(RISING);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Icu_setEdgeDetectionType>
		timer_counter=0;
     f12:	10 92 76 00 	sts	0x0076, r1
	}
	}

}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <GPIO_setupPinDirection+0x6>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <GPIO_setupPinDirection+0x8>
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	6a 83       	std	Y+2, r22	; 0x02
     f2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	08 f0       	brcs	.+2      	; 0xf38 <GPIO_setupPinDirection+0x1c>
     f36:	d5 c0       	rjmp	.+426    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <GPIO_setupPinDirection+0x24>
     f3e:	d1 c0       	rjmp	.+418    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_setupPinDirection+0x3a>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <GPIO_setupPinDirection+0xc0>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	2c f4       	brge	.+10     	; 0xf6a <GPIO_setupPinDirection+0x4e>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	71 f0       	breq	.+28     	; 0xf84 <GPIO_setupPinDirection+0x68>
     f68:	bc c0       	rjmp	.+376    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
     f6a:	2c 81       	ldd	r18, Y+4	; 0x04
     f6c:	3d 81       	ldd	r19, Y+5	; 0x05
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <GPIO_setupPinDirection+0x5a>
     f74:	5f c0       	rjmp	.+190    	; 0x1034 <GPIO_setupPinDirection+0x118>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <GPIO_setupPinDirection+0x66>
     f80:	85 c0       	rjmp	.+266    	; 0x108c <GPIO_setupPinDirection+0x170>
     f82:	af c0       	rjmp	.+350    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	a1 f4       	brne	.+40     	; 0xfb2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f8a:	aa e3       	ldi	r26, 0x3A	; 58
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ea e3       	ldi	r30, 0x3A	; 58
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_setupPinDirection+0x8c>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_setupPinDirection+0x88>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	98 c0       	rjmp	.+304    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fb2:	aa e3       	ldi	r26, 0x3A	; 58
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e3       	ldi	r30, 0x3A	; 58
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_setupPinDirection+0xb4>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_setupPinDirection+0xb0>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	83 c0       	rjmp	.+262    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	a1 f4       	brne	.+40     	; 0x100a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fe2:	a7 e3       	ldi	r26, 0x37	; 55
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e7 e3       	ldi	r30, 0x37	; 55
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_setupPinDirection+0xe4>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_setupPinDirection+0xe0>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	6c c0       	rjmp	.+216    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    100a:	a7 e3       	ldi	r26, 0x37	; 55
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e3       	ldi	r30, 0x37	; 55
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_setupPinDirection+0x10c>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_setupPinDirection+0x108>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	57 c0       	rjmp	.+174    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	a1 f4       	brne	.+40     	; 0x1062 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    103a:	a4 e3       	ldi	r26, 0x34	; 52
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <GPIO_setupPinDirection+0x13c>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <GPIO_setupPinDirection+0x138>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	40 c0       	rjmp	.+128    	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1062:	a4 e3       	ldi	r26, 0x34	; 52
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e4 e3       	ldi	r30, 0x34	; 52
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x164>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x160>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	2b c0       	rjmp	.+86     	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	a1 f4       	brne	.+40     	; 0x10ba <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <GPIO_setupPinDirection+0x194>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <GPIO_setupPinDirection+0x190>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10ba:	a1 e3       	ldi	r26, 0x31	; 49
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e1 e3       	ldi	r30, 0x31	; 49
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0x1bc>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0x1b8>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <GPIO_writePin+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_writePin+0x8>
    10fa:	0f 92       	push	r0
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	6a 83       	std	Y+2, r22	; 0x02
    1104:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 30       	cpi	r24, 0x08	; 8
    110a:	08 f0       	brcs	.+2      	; 0x110e <GPIO_writePin+0x1c>
    110c:	d5 c0       	rjmp	.+426    	; 0x12b8 <GPIO_writePin+0x1c6>
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	84 30       	cpi	r24, 0x04	; 4
    1112:	08 f0       	brcs	.+2      	; 0x1116 <GPIO_writePin+0x24>
    1114:	d1 c0       	rjmp	.+418    	; 0x12b8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3d 83       	std	Y+5, r19	; 0x05
    111e:	2c 83       	std	Y+4, r18	; 0x04
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <GPIO_writePin+0x3a>
    112a:	43 c0       	rjmp	.+134    	; 0x11b2 <GPIO_writePin+0xc0>
    112c:	2c 81       	ldd	r18, Y+4	; 0x04
    112e:	3d 81       	ldd	r19, Y+5	; 0x05
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <GPIO_writePin+0x4e>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	71 f0       	breq	.+28     	; 0x115a <GPIO_writePin+0x68>
    113e:	bc c0       	rjmp	.+376    	; 0x12b8 <GPIO_writePin+0x1c6>
    1140:	2c 81       	ldd	r18, Y+4	; 0x04
    1142:	3d 81       	ldd	r19, Y+5	; 0x05
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <GPIO_writePin+0x5a>
    114a:	5f c0       	rjmp	.+190    	; 0x120a <GPIO_writePin+0x118>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <GPIO_writePin+0x66>
    1156:	85 c0       	rjmp	.+266    	; 0x1262 <GPIO_writePin+0x170>
    1158:	af c0       	rjmp	.+350    	; 0x12b8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	a1 f4       	brne	.+40     	; 0x1188 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1160:	ab e3       	ldi	r26, 0x3B	; 59
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	eb e3       	ldi	r30, 0x3B	; 59
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_writePin+0x8c>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_writePin+0x88>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	98 c0       	rjmp	.+304    	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1188:	ab e3       	ldi	r26, 0x3B	; 59
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	eb e3       	ldi	r30, 0x3B	; 59
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_writePin+0xb4>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_writePin+0xb0>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	83 c0       	rjmp	.+262    	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	a1 f4       	brne	.+40     	; 0x11e0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11b8:	a8 e3       	ldi	r26, 0x38	; 56
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_writePin+0xe4>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_writePin+0xe0>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	6c c0       	rjmp	.+216    	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11e0:	a8 e3       	ldi	r26, 0x38	; 56
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e3       	ldi	r30, 0x38	; 56
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_writePin+0x10c>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_writePin+0x108>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	57 c0       	rjmp	.+174    	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	a1 f4       	brne	.+40     	; 0x1238 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1210:	a5 e3       	ldi	r26, 0x35	; 53
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e3       	ldi	r30, 0x35	; 53
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_writePin+0x13c>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_writePin+0x138>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	40 c0       	rjmp	.+128    	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1238:	a5 e3       	ldi	r26, 0x35	; 53
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e3       	ldi	r30, 0x35	; 53
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x164>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x160>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	2b c0       	rjmp	.+86     	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	a1 f4       	brne	.+40     	; 0x1290 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_writePin+0x194>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_writePin+0x190>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0x1bc>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0x1b8>
    12b2:	80 95       	com	r24
    12b4:	84 23       	and	r24, r20
    12b6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <GPIO_readPin+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <GPIO_readPin+0x8>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	8a 83       	std	Y+2, r24	; 0x02
    12d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12da:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 30       	cpi	r24, 0x08	; 8
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <GPIO_readPin+0x1c>
    12e2:	84 c0       	rjmp	.+264    	; 0x13ec <GPIO_readPin+0x124>
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <GPIO_readPin+0x24>
    12ea:	80 c0       	rjmp	.+256    	; 0x13ec <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3d 83       	std	Y+5, r19	; 0x05
    12f4:	2c 83       	std	Y+4, r18	; 0x04
    12f6:	4c 81       	ldd	r20, Y+4	; 0x04
    12f8:	5d 81       	ldd	r21, Y+5	; 0x05
    12fa:	41 30       	cpi	r20, 0x01	; 1
    12fc:	51 05       	cpc	r21, r1
    12fe:	79 f1       	breq	.+94     	; 0x135e <GPIO_readPin+0x96>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	34 f4       	brge	.+12     	; 0x1316 <GPIO_readPin+0x4e>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	21 15       	cp	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	69 f0       	breq	.+26     	; 0x132e <GPIO_readPin+0x66>
    1314:	6b c0       	rjmp	.+214    	; 0x13ec <GPIO_readPin+0x124>
    1316:	4c 81       	ldd	r20, Y+4	; 0x04
    1318:	5d 81       	ldd	r21, Y+5	; 0x05
    131a:	42 30       	cpi	r20, 0x02	; 2
    131c:	51 05       	cpc	r21, r1
    131e:	b9 f1       	breq	.+110    	; 0x138e <GPIO_readPin+0xc6>
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <GPIO_readPin+0x64>
    132a:	49 c0       	rjmp	.+146    	; 0x13be <GPIO_readPin+0xf6>
    132c:	5f c0       	rjmp	.+190    	; 0x13ec <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    132e:	e9 e3       	ldi	r30, 0x39	; 57
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a9 01       	movw	r20, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <GPIO_readPin+0x7e>
    1342:	55 95       	asr	r21
    1344:	47 95       	ror	r20
    1346:	8a 95       	dec	r24
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <GPIO_readPin+0x7a>
    134a:	ca 01       	movw	r24, r20
    134c:	81 70       	andi	r24, 0x01	; 1
    134e:	90 70       	andi	r25, 0x00	; 0
    1350:	88 23       	and	r24, r24
    1352:	19 f0       	breq	.+6      	; 0x135a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	49 c0       	rjmp	.+146    	; 0x13ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	47 c0       	rjmp	.+142    	; 0x13ec <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    135e:	e6 e3       	ldi	r30, 0x36	; 54
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_readPin+0xae>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_readPin+0xaa>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	90 70       	andi	r25, 0x00	; 0
    1380:	88 23       	and	r24, r24
    1382:	19 f0       	breq	.+6      	; 0x138a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	31 c0       	rjmp	.+98     	; 0x13ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    138a:	19 82       	std	Y+1, r1	; 0x01
    138c:	2f c0       	rjmp	.+94     	; 0x13ec <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    138e:	e3 e3       	ldi	r30, 0x33	; 51
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_readPin+0xde>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_readPin+0xda>
    13aa:	ca 01       	movw	r24, r20
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	90 70       	andi	r25, 0x00	; 0
    13b0:	88 23       	and	r24, r24
    13b2:	19 f0       	breq	.+6      	; 0x13ba <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	19 c0       	rjmp	.+50     	; 0x13ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	17 c0       	rjmp	.+46     	; 0x13ec <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13be:	e0 e3       	ldi	r30, 0x30	; 48
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_readPin+0x10e>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_readPin+0x10a>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	88 23       	and	r24, r24
    13e2:	19 f0       	breq	.+6      	; 0x13ea <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ea:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <GPIO_setupPortDirection+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <GPIO_setupPortDirection+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	90 f5       	brcc	.+100    	; 0x1478 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3c 83       	std	Y+4, r19	; 0x04
    141c:	2b 83       	std	Y+3, r18	; 0x03
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	d1 f0       	breq	.+52     	; 0x145c <GPIO_setupPortDirection+0x5e>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <GPIO_setupPortDirection+0x3e>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 f0       	breq	.+24     	; 0x1452 <GPIO_setupPortDirection+0x54>
    143a:	1e c0       	rjmp	.+60     	; 0x1478 <GPIO_setupPortDirection+0x7a>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	81 f0       	breq	.+32     	; 0x1466 <GPIO_setupPortDirection+0x68>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <GPIO_setupPortDirection+0x72>
    1450:	13 c0       	rjmp	.+38     	; 0x1478 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	80 83       	st	Z, r24
    145a:	0e c0       	rjmp	.+28     	; 0x1478 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    145c:	e7 e3       	ldi	r30, 0x37	; 55
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
    1464:	09 c0       	rjmp	.+18     	; 0x1478 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1466:	e4 e3       	ldi	r30, 0x34	; 52
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1470:	e1 e3       	ldi	r30, 0x31	; 49
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
			break;
		}
	}
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <GPIO_writePort+0x6>
    148c:	00 d0       	rcall	.+0      	; 0x148e <GPIO_writePort+0x8>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	90 f5       	brcc	.+100    	; 0x1500 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	d1 f0       	breq	.+52     	; 0x14e4 <GPIO_writePort+0x5e>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <GPIO_writePort+0x3e>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <GPIO_writePort+0x54>
    14c2:	1e c0       	rjmp	.+60     	; 0x1500 <GPIO_writePort+0x7a>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	81 f0       	breq	.+32     	; 0x14ee <GPIO_writePort+0x68>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <GPIO_writePort+0x72>
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 83       	st	Z, r24
    14e2:	0e c0       	rjmp	.+28     	; 0x1500 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	80 83       	st	Z, r24
    14ec:	09 c0       	rjmp	.+18     	; 0x1500 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	80 83       	st	Z, r24
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14f8:	e2 e3       	ldi	r30, 0x32	; 50
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <GPIO_readPort+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <GPIO_readPort+0x8>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    151c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	90 f5       	brcc	.+100    	; 0x1588 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3c 83       	std	Y+4, r19	; 0x04
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	d1 f0       	breq	.+52     	; 0x156c <GPIO_readPort+0x5e>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <GPIO_readPort+0x3e>
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	61 f0       	breq	.+24     	; 0x1562 <GPIO_readPort+0x54>
    154a:	1e c0       	rjmp	.+60     	; 0x1588 <GPIO_readPort+0x7a>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	81 f0       	breq	.+32     	; 0x1576 <GPIO_readPort+0x68>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	81 f0       	breq	.+32     	; 0x1580 <GPIO_readPort+0x72>
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1562:	e9 e3       	ldi	r30, 0x39	; 57
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	0e c0       	rjmp	.+28     	; 0x1588 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    156c:	e6 e3       	ldi	r30, 0x36	; 54
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1576:	e3 e3       	ldi	r30, 0x33	; 51
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1580:	e0 e3       	ldi	r30, 0x30	; 48
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1588:	89 81       	ldd	r24, Y+1	; 0x01
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    15c2:	80 91 78 00 	lds	r24, 0x0078
    15c6:	90 91 79 00 	lds	r25, 0x0079
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	29 f0       	breq	.+10     	; 0x15d8 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    15ce:	e0 91 78 00 	lds	r30, 0x0078
    15d2:	f0 91 79 00 	lds	r31, 0x0079
    15d6:	09 95       	icall
	}
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	ff 91       	pop	r31
    15de:	ef 91       	pop	r30
    15e0:	bf 91       	pop	r27
    15e2:	af 91       	pop	r26
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	7f 91       	pop	r23
    15ea:	6f 91       	pop	r22
    15ec:	5f 91       	pop	r21
    15ee:	4f 91       	pop	r20
    15f0:	3f 91       	pop	r19
    15f2:	2f 91       	pop	r18
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <Icu_init+0x6>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    160c:	a1 e3       	ldi	r26, 0x31	; 49
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e1 e3       	ldi	r30, 0x31	; 49
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8f 7b       	andi	r24, 0xBF	; 191
    1618:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    161a:	ef e4       	ldi	r30, 0x4F	; 79
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8c e0       	ldi	r24, 0x0C	; 12
    1620:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1622:	ae e4       	ldi	r26, 0x4E	; 78
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	98 2f       	mov	r25, r24
    162e:	98 7f       	andi	r25, 0xF8	; 248
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	80 81       	ld	r24, Z
    1636:	89 2b       	or	r24, r25
    1638:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    163a:	ae e4       	ldi	r26, 0x4E	; 78
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ee e4       	ldi	r30, 0x4E	; 78
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	28 2f       	mov	r18, r24
    1646:	2f 7b       	andi	r18, 0xBF	; 191
    1648:	e9 81       	ldd	r30, Y+1	; 0x01
    164a:	fa 81       	ldd	r31, Y+2	; 0x02
    164c:	81 81       	ldd	r24, Z+1	; 0x01
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	00 24       	eor	r0, r0
    1654:	96 95       	lsr	r25
    1656:	87 95       	ror	r24
    1658:	07 94       	ror	r0
    165a:	96 95       	lsr	r25
    165c:	87 95       	ror	r24
    165e:	07 94       	ror	r0
    1660:	98 2f       	mov	r25, r24
    1662:	80 2d       	mov	r24, r0
    1664:	82 2b       	or	r24, r18
    1666:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1668:	ec e4       	ldi	r30, 0x4C	; 76
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	11 82       	std	Z+1, r1	; 0x01
    166e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1670:	e6 e4       	ldi	r30, 0x46	; 70
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	11 82       	std	Z+1, r1	; 0x01
    1676:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1678:	a9 e5       	ldi	r26, 0x59	; 89
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e9 e5       	ldi	r30, 0x59	; 89
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	8c 93       	st	X, r24
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <Icu_setCallBack+0x6>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	90 93 79 00 	sts	0x0079, r25
    16a6:	80 93 78 00 	sts	0x0078, r24
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    16c0:	ae e4       	ldi	r26, 0x4E	; 78
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ee e4       	ldi	r30, 0x4E	; 78
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	28 2f       	mov	r18, r24
    16cc:	2f 7b       	andi	r18, 0xBF	; 191
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	00 24       	eor	r0, r0
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	07 94       	ror	r0
    16dc:	96 95       	lsr	r25
    16de:	87 95       	ror	r24
    16e0:	07 94       	ror	r0
    16e2:	98 2f       	mov	r25, r24
    16e4:	80 2d       	mov	r24, r0
    16e6:	82 2b       	or	r24, r18
    16e8:	8c 93       	st	X, r24
}
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    16fa:	e6 e4       	ldi	r30, 0x46	; 70
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1710:	ec e4       	ldi	r30, 0x4C	; 76
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	11 82       	std	Z+1, r1	; 0x01
    1716:	10 82       	st	Z, r1
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1726:	ef e4       	ldi	r30, 0x4F	; 79
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	10 82       	st	Z, r1
	TCCR1B = 0;
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	10 82       	st	Z, r1
	TCNT1 = 0;
    1732:	ec e4       	ldi	r30, 0x4C	; 76
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	11 82       	std	Z+1, r1	; 0x01
    1738:	10 82       	st	Z, r1
	ICR1 = 0;
    173a:	e6 e4       	ldi	r30, 0x46	; 70
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	11 82       	std	Z+1, r1	; 0x01
    1740:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1742:	a9 e5       	ldi	r26, 0x59	; 89
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e9 e5       	ldi	r30, 0x59	; 89
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 7d       	andi	r24, 0xDF	; 223
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 8e 07 	call	0xf1c	; 0xf1c <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	6f ef       	ldi	r22, 0xFF	; 255
    1780:	0e 94 ff 09 	call	0x13fe	; 0x13fe <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1784:	88 e3       	ldi	r24, 0x38	; 56
    1786:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    178a:	8c e0       	ldi	r24, 0x0C	; 12
    178c:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_sendCommand>
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	e9 97       	sbiw	r28, 0x39	; 57
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e8       	ldi	r26, 0x80	; 128
    17cc:	bf e3       	ldi	r27, 0x3F	; 63
    17ce:	8d ab       	std	Y+53, r24	; 0x35
    17d0:	9e ab       	std	Y+54, r25	; 0x36
    17d2:	af ab       	std	Y+55, r26	; 0x37
    17d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	6d a9       	ldd	r22, Y+53	; 0x35
    17d8:	7e a9       	ldd	r23, Y+54	; 0x36
    17da:	8f a9       	ldd	r24, Y+55	; 0x37
    17dc:	98 ad       	ldd	r25, Y+56	; 0x38
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	4a e7       	ldi	r20, 0x7A	; 122
    17e4:	53 e4       	ldi	r21, 0x43	; 67
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	89 ab       	std	Y+49, r24	; 0x31
    17f0:	9a ab       	std	Y+50, r25	; 0x32
    17f2:	ab ab       	std	Y+51, r26	; 0x33
    17f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17f6:	69 a9       	ldd	r22, Y+49	; 0x31
    17f8:	7a a9       	ldd	r23, Y+50	; 0x32
    17fa:	8b a9       	ldd	r24, Y+51	; 0x33
    17fc:	9c a9       	ldd	r25, Y+52	; 0x34
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180a:	88 23       	and	r24, r24
    180c:	2c f4       	brge	.+10     	; 0x1818 <LCD_sendCommand+0x7c>
		__ticks = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	98 ab       	std	Y+48, r25	; 0x30
    1814:	8f a7       	std	Y+47, r24	; 0x2f
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1818:	69 a9       	ldd	r22, Y+49	; 0x31
    181a:	7a a9       	ldd	r23, Y+50	; 0x32
    181c:	8b a9       	ldd	r24, Y+51	; 0x33
    181e:	9c a9       	ldd	r25, Y+52	; 0x34
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182c:	18 16       	cp	r1, r24
    182e:	4c f5       	brge	.+82     	; 0x1882 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	6d a9       	ldd	r22, Y+53	; 0x35
    1832:	7e a9       	ldd	r23, Y+54	; 0x36
    1834:	8f a9       	ldd	r24, Y+55	; 0x37
    1836:	98 ad       	ldd	r25, Y+56	; 0x38
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e2       	ldi	r20, 0x20	; 32
    183e:	51 e4       	ldi	r21, 0x41	; 65
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	98 ab       	std	Y+48, r25	; 0x30
    1856:	8f a7       	std	Y+47, r24	; 0x2f
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <LCD_sendCommand+0xdc>
    185a:	89 e1       	ldi	r24, 0x19	; 25
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9e a7       	std	Y+46, r25	; 0x2e
    1860:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1862:	8d a5       	ldd	r24, Y+45	; 0x2d
    1864:	9e a5       	ldd	r25, Y+46	; 0x2e
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_sendCommand+0xca>
    186a:	9e a7       	std	Y+46, r25	; 0x2e
    186c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1870:	98 a9       	ldd	r25, Y+48	; 0x30
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	98 ab       	std	Y+48, r25	; 0x30
    1876:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	8f a5       	ldd	r24, Y+47	; 0x2f
    187a:	98 a9       	ldd	r25, Y+48	; 0x30
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	69 f7       	brne	.-38     	; 0x185a <LCD_sendCommand+0xbe>
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1882:	69 a9       	ldd	r22, Y+49	; 0x31
    1884:	7a a9       	ldd	r23, Y+50	; 0x32
    1886:	8b a9       	ldd	r24, Y+51	; 0x33
    1888:	9c a9       	ldd	r25, Y+52	; 0x34
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	98 ab       	std	Y+48, r25	; 0x30
    1894:	8f a7       	std	Y+47, r24	; 0x2f
    1896:	8f a5       	ldd	r24, Y+47	; 0x2f
    1898:	98 a9       	ldd	r25, Y+48	; 0x30
    189a:	9c a7       	std	Y+44, r25	; 0x2c
    189c:	8b a7       	std	Y+43, r24	; 0x2b
    189e:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_sendCommand+0x106>
    18a6:	9c a7       	std	Y+44, r25	; 0x2c
    18a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e8       	ldi	r26, 0x80	; 128
    18ba:	bf e3       	ldi	r27, 0x3F	; 63
    18bc:	8f a3       	std	Y+39, r24	; 0x27
    18be:	98 a7       	std	Y+40, r25	; 0x28
    18c0:	a9 a7       	std	Y+41, r26	; 0x29
    18c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6f a1       	ldd	r22, Y+39	; 0x27
    18c6:	78 a5       	ldd	r23, Y+40	; 0x28
    18c8:	89 a5       	ldd	r24, Y+41	; 0x29
    18ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	53 e4       	ldi	r21, 0x43	; 67
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8b a3       	std	Y+35, r24	; 0x23
    18de:	9c a3       	std	Y+36, r25	; 0x24
    18e0:	ad a3       	std	Y+37, r26	; 0x25
    18e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18e4:	6b a1       	ldd	r22, Y+35	; 0x23
    18e6:	7c a1       	ldd	r23, Y+36	; 0x24
    18e8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ea:	9e a1       	ldd	r25, Y+38	; 0x26
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <LCD_sendCommand+0x16a>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9a a3       	std	Y+34, r25	; 0x22
    1902:	89 a3       	std	Y+33, r24	; 0x21
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1906:	6b a1       	ldd	r22, Y+35	; 0x23
    1908:	7c a1       	ldd	r23, Y+36	; 0x24
    190a:	8d a1       	ldd	r24, Y+37	; 0x25
    190c:	9e a1       	ldd	r25, Y+38	; 0x26
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6f a1       	ldd	r22, Y+39	; 0x27
    1920:	78 a5       	ldd	r23, Y+40	; 0x28
    1922:	89 a5       	ldd	r24, Y+41	; 0x29
    1924:	9a a5       	ldd	r25, Y+42	; 0x2a
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9a a3       	std	Y+34, r25	; 0x22
    1944:	89 a3       	std	Y+33, r24	; 0x21
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <LCD_sendCommand+0x1ca>
    1948:	89 e1       	ldi	r24, 0x19	; 25
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	98 a3       	std	Y+32, r25	; 0x20
    194e:	8f 8f       	std	Y+31, r24	; 0x1f
    1950:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1952:	98 a1       	ldd	r25, Y+32	; 0x20
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_sendCommand+0x1b8>
    1958:	98 a3       	std	Y+32, r25	; 0x20
    195a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	89 a1       	ldd	r24, Y+33	; 0x21
    195e:	9a a1       	ldd	r25, Y+34	; 0x22
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9a a3       	std	Y+34, r25	; 0x22
    1964:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	89 a1       	ldd	r24, Y+33	; 0x21
    1968:	9a a1       	ldd	r25, Y+34	; 0x22
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <LCD_sendCommand+0x1ac>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	6b a1       	ldd	r22, Y+35	; 0x23
    1972:	7c a1       	ldd	r23, Y+36	; 0x24
    1974:	8d a1       	ldd	r24, Y+37	; 0x25
    1976:	9e a1       	ldd	r25, Y+38	; 0x26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9a a3       	std	Y+34, r25	; 0x22
    1982:	89 a3       	std	Y+33, r24	; 0x21
    1984:	89 a1       	ldd	r24, Y+33	; 0x21
    1986:	9a a1       	ldd	r25, Y+34	; 0x22
    1988:	9e 8f       	std	Y+30, r25	; 0x1e
    198a:	8d 8f       	std	Y+29, r24	; 0x1d
    198c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    198e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_sendCommand+0x1f4>
    1994:	9e 8f       	std	Y+30, r25	; 0x1e
    1996:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	69 ad       	ldd	r22, Y+57	; 0x39
    199c:	0e 94 43 0a 	call	0x1486	; 0x1486 <GPIO_writePort>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e8       	ldi	r26, 0x80	; 128
    19a6:	bf e3       	ldi	r27, 0x3F	; 63
    19a8:	89 8f       	std	Y+25, r24	; 0x19
    19aa:	9a 8f       	std	Y+26, r25	; 0x1a
    19ac:	ab 8f       	std	Y+27, r26	; 0x1b
    19ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b0:	69 8d       	ldd	r22, Y+25	; 0x19
    19b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a e7       	ldi	r20, 0x7A	; 122
    19be:	53 e4       	ldi	r21, 0x43	; 67
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	8d 8b       	std	Y+21, r24	; 0x15
    19ca:	9e 8b       	std	Y+22, r25	; 0x16
    19cc:	af 8b       	std	Y+23, r26	; 0x17
    19ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d0:	6d 89       	ldd	r22, Y+21	; 0x15
    19d2:	7e 89       	ldd	r23, Y+22	; 0x16
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <LCD_sendCommand+0x256>
		__ticks = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9c 8b       	std	Y+20, r25	; 0x14
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
    19f0:	3f c0       	rjmp	.+126    	; 0x1a70 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    19f2:	6d 89       	ldd	r22, Y+21	; 0x15
    19f4:	7e 89       	ldd	r23, Y+22	; 0x16
    19f6:	8f 89       	ldd	r24, Y+23	; 0x17
    19f8:	98 8d       	ldd	r25, Y+24	; 0x18
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	4c f5       	brge	.+82     	; 0x1a5c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e2       	ldi	r20, 0x20	; 32
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
    1a32:	0f c0       	rjmp	.+30     	; 0x1a52 <LCD_sendCommand+0x2b6>
    1a34:	89 e1       	ldi	r24, 0x19	; 25
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9a 8b       	std	Y+18, r25	; 0x12
    1a3a:	89 8b       	std	Y+17, r24	; 0x11
    1a3c:	89 89       	ldd	r24, Y+17	; 0x11
    1a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_sendCommand+0x2a4>
    1a44:	9a 8b       	std	Y+18, r25	; 0x12
    1a46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a52:	8b 89       	ldd	r24, Y+19	; 0x13
    1a54:	9c 89       	ldd	r25, Y+20	; 0x14
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	69 f7       	brne	.-38     	; 0x1a34 <LCD_sendCommand+0x298>
    1a5a:	14 c0       	rjmp	.+40     	; 0x1a84 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a60:	8f 89       	ldd	r24, Y+23	; 0x17
    1a62:	98 8d       	ldd	r25, Y+24	; 0x18
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	8b 89       	ldd	r24, Y+19	; 0x13
    1a72:	9c 89       	ldd	r25, Y+20	; 0x14
    1a74:	98 8b       	std	Y+16, r25	; 0x10
    1a76:	8f 87       	std	Y+15, r24	; 0x0f
    1a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7a:	98 89       	ldd	r25, Y+16	; 0x10
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0x2e0>
    1a80:	98 8b       	std	Y+16, r25	; 0x10
    1a82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	62 e0       	ldi	r22, 0x02	; 2
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e8       	ldi	r26, 0x80	; 128
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	ad 87       	std	Y+13, r26	; 0x0d
    1a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8f 83       	std	Y+7, r24	; 0x07
    1ab8:	98 87       	std	Y+8, r25	; 0x08
    1aba:	a9 87       	std	Y+9, r26	; 0x09
    1abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <LCD_sendCommand+0x344>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <LCD_sendCommand+0x3a4>
    1b22:	89 e1       	ldi	r24, 0x19	; 25
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_sendCommand+0x392>
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <LCD_sendCommand+0x386>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_sendCommand+0x3ce>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1b72:	e9 96       	adiw	r28, 0x39	; 57
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	e9 97       	sbiw	r28, 0x39	; 57
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	8d ab       	std	Y+53, r24	; 0x35
    1bb8:	9e ab       	std	Y+54, r25	; 0x36
    1bba:	af ab       	std	Y+55, r26	; 0x37
    1bbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a e7       	ldi	r20, 0x7A	; 122
    1bcc:	53 e4       	ldi	r21, 0x43	; 67
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	89 ab       	std	Y+49, r24	; 0x31
    1bd8:	9a ab       	std	Y+50, r25	; 0x32
    1bda:	ab ab       	std	Y+51, r26	; 0x33
    1bdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bde:	69 a9       	ldd	r22, Y+49	; 0x31
    1be0:	7a a9       	ldd	r23, Y+50	; 0x32
    1be2:	8b a9       	ldd	r24, Y+51	; 0x33
    1be4:	9c a9       	ldd	r25, Y+52	; 0x34
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	98 ab       	std	Y+48, r25	; 0x30
    1bfc:	8f a7       	std	Y+47, r24	; 0x2f
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1c00:	69 a9       	ldd	r22, Y+49	; 0x31
    1c02:	7a a9       	ldd	r23, Y+50	; 0x32
    1c04:	8b a9       	ldd	r24, Y+51	; 0x33
    1c06:	9c a9       	ldd	r25, Y+52	; 0x34
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <LCD_displayCharacter+0xdc>
    1c42:	89 e1       	ldi	r24, 0x19	; 25
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9e a7       	std	Y+46, r25	; 0x2e
    1c48:	8d a7       	std	Y+45, r24	; 0x2d
    1c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_displayCharacter+0xca>
    1c52:	9e a7       	std	Y+46, r25	; 0x2e
    1c54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c58:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	98 ab       	std	Y+48, r25	; 0x30
    1c5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c62:	98 a9       	ldd	r25, Y+48	; 0x30
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <LCD_displayCharacter+0xbe>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c70:	9c a9       	ldd	r25, Y+52	; 0x34
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
    1c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c80:	98 a9       	ldd	r25, Y+48	; 0x30
    1c82:	9c a7       	std	Y+44, r25	; 0x2c
    1c84:	8b a7       	std	Y+43, r24	; 0x2b
    1c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_displayCharacter+0x106>
    1c8e:	9c a7       	std	Y+44, r25	; 0x2c
    1c90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e8       	ldi	r26, 0x80	; 128
    1ca2:	bf e3       	ldi	r27, 0x3F	; 63
    1ca4:	8f a3       	std	Y+39, r24	; 0x27
    1ca6:	98 a7       	std	Y+40, r25	; 0x28
    1ca8:	a9 a7       	std	Y+41, r26	; 0x29
    1caa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6f a1       	ldd	r22, Y+39	; 0x27
    1cae:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a e7       	ldi	r20, 0x7A	; 122
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8b a3       	std	Y+35, r24	; 0x23
    1cc6:	9c a3       	std	Y+36, r25	; 0x24
    1cc8:	ad a3       	std	Y+37, r26	; 0x25
    1cca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cce:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6f a1       	ldd	r22, Y+39	; 0x27
    1d08:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <LCD_displayCharacter+0x1ca>
    1d30:	89 e1       	ldi	r24, 0x19	; 25
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	98 a3       	std	Y+32, r25	; 0x20
    1d36:	8f 8f       	std	Y+31, r24	; 0x1f
    1d38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_displayCharacter+0x1b8>
    1d40:	98 a3       	std	Y+32, r25	; 0x20
    1d42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	89 a1       	ldd	r24, Y+33	; 0x21
    1d46:	9a a1       	ldd	r25, Y+34	; 0x22
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9a a3       	std	Y+34, r25	; 0x22
    1d4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d50:	9a a1       	ldd	r25, Y+34	; 0x22
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <LCD_displayCharacter+0x1ac>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d70:	9e 8f       	std	Y+30, r25	; 0x1e
    1d72:	8d 8f       	std	Y+29, r24	; 0x1d
    1d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_displayCharacter+0x1f4>
    1d7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	69 ad       	ldd	r22, Y+57	; 0x39
    1d84:	0e 94 43 0a 	call	0x1486	; 0x1486 <GPIO_writePort>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e8       	ldi	r26, 0x80	; 128
    1d8e:	bf e3       	ldi	r27, 0x3F	; 63
    1d90:	89 8f       	std	Y+25, r24	; 0x19
    1d92:	9a 8f       	std	Y+26, r25	; 0x1a
    1d94:	ab 8f       	std	Y+27, r26	; 0x1b
    1d96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a e7       	ldi	r20, 0x7A	; 122
    1da6:	53 e4       	ldi	r21, 0x43	; 67
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8d 8b       	std	Y+21, r24	; 0x15
    1db2:	9e 8b       	std	Y+22, r25	; 0x16
    1db4:	af 8b       	std	Y+23, r26	; 0x17
    1db6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <LCD_displayCharacter+0x256>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	69 8d       	ldd	r22, Y+25	; 0x19
    1df4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <LCD_displayCharacter+0x2b6>
    1e1c:	89 e1       	ldi	r24, 0x19	; 25
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9a 8b       	std	Y+18, r25	; 0x12
    1e22:	89 8b       	std	Y+17, r24	; 0x11
    1e24:	89 89       	ldd	r24, Y+17	; 0x11
    1e26:	9a 89       	ldd	r25, Y+18	; 0x12
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <LCD_displayCharacter+0x2a4>
    1e2c:	9a 8b       	std	Y+18, r25	; 0x12
    1e2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	8b 89       	ldd	r24, Y+19	; 0x13
    1e32:	9c 89       	ldd	r25, Y+20	; 0x14
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <LCD_displayCharacter+0x298>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	6d 89       	ldd	r22, Y+21	; 0x15
    1e46:	7e 89       	ldd	r23, Y+22	; 0x16
    1e48:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	98 8b       	std	Y+16, r25	; 0x10
    1e5e:	8f 87       	std	Y+15, r24	; 0x0f
    1e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e62:	98 89       	ldd	r25, Y+16	; 0x10
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_displayCharacter+0x2e0>
    1e68:	98 8b       	std	Y+16, r25	; 0x10
    1e6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GPIO_writePin>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e8       	ldi	r26, 0x80	; 128
    1e7c:	bf e3       	ldi	r27, 0x3F	; 63
    1e7e:	8b 87       	std	Y+11, r24	; 0x0b
    1e80:	9c 87       	std	Y+12, r25	; 0x0c
    1e82:	ad 87       	std	Y+13, r26	; 0x0d
    1e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a e7       	ldi	r20, 0x7A	; 122
    1e94:	53 e4       	ldi	r21, 0x43	; 67
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8f 83       	std	Y+7, r24	; 0x07
    1ea0:	98 87       	std	Y+8, r25	; 0x08
    1ea2:	a9 87       	std	Y+9, r26	; 0x09
    1ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	4c f5       	brge	.+82     	; 0x1f32 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <LCD_displayCharacter+0x3a4>
    1f0a:	89 e1       	ldi	r24, 0x19	; 25
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <LCD_displayCharacter+0x392>
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <LCD_displayCharacter+0x386>
    1f30:	14 c0       	rjmp	.+40     	; 0x1f5a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_displayCharacter+0x3ce>
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1f5a:	e9 96       	adiw	r28, 0x39	; 57
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <LCD_displayString+0x6>
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    1f7e:	0e c0       	rjmp	.+28     	; 0x1f9c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	80 81       	ld	r24, Z
    1f92:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LCD_displayCharacter>
		i++;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	e2 0f       	add	r30, r18
    1faa:	f3 1f       	adc	r31, r19
    1fac:	80 81       	ld	r24, Z
    1fae:	88 23       	and	r24, r24
    1fb0:	39 f7       	brne	.-50     	; 0x1f80 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <LCD_moveCursor+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <LCD_moveCursor+0x8>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3d 83       	std	Y+5, r19	; 0x05
    1fd8:	2c 83       	std	Y+4, r18	; 0x04
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	c1 f0       	breq	.+48     	; 0x2014 <LCD_moveCursor+0x56>
    1fe4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <LCD_moveCursor+0x3a>
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	61 f0       	breq	.+24     	; 0x200e <LCD_moveCursor+0x50>
    1ff6:	19 c0       	rjmp	.+50     	; 0x202a <LCD_moveCursor+0x6c>
    1ff8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffa:	3d 81       	ldd	r19, Y+5	; 0x05
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	69 f0       	breq	.+26     	; 0x201c <LCD_moveCursor+0x5e>
    2002:	8c 81       	ldd	r24, Y+4	; 0x04
    2004:	9d 81       	ldd	r25, Y+5	; 0x05
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	91 05       	cpc	r25, r1
    200a:	61 f0       	breq	.+24     	; 0x2024 <LCD_moveCursor+0x66>
    200c:	0e c0       	rjmp	.+28     	; 0x202a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	0b c0       	rjmp	.+22     	; 0x202a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	80 5c       	subi	r24, 0xC0	; 192
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	07 c0       	rjmp	.+14     	; 0x202a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	80 5f       	subi	r24, 0xF0	; 240
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	03 c0       	rjmp	.+6      	; 0x202a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	80 5b       	subi	r24, 0xB0	; 176
    2028:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	80 68       	ori	r24, 0x80	; 128
    202e:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_sendCommand>
}
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <LCD_displayStringRowColumn+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <LCD_displayStringRowColumn+0x8>
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	6a 83       	std	Y+2, r22	; 0x02
    2052:	5c 83       	std	Y+4, r21	; 0x04
    2054:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	6a 81       	ldd	r22, Y+2	; 0x02
    205a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayString>
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	62 97       	sbiw	r28, 0x12	; 18
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	9a 8b       	std	Y+18, r25	; 0x12
    208a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    208c:	89 89       	ldd	r24, Y+17	; 0x11
    208e:	9a 89       	ldd	r25, Y+18	; 0x12
    2090:	9e 01       	movw	r18, r28
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	b9 01       	movw	r22, r18
    2098:	4a e0       	ldi	r20, 0x0A	; 10
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <itoa>
   LCD_displayString(buff); /* Display the string */
    20a0:	ce 01       	movw	r24, r28
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayString>
}
    20a8:	62 96       	adiw	r28, 0x12	; 18
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	0e 94 ce 0b 	call	0x179c	; 0x179c <LCD_sendCommand>
}
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <main>:
#include "lcd.h"	/* Include LCD header file */
#include "icu.h"    /* Include ICU header file */
#include "std_types.h"
#include "Ultrasonic.h" /* Include Ultrasonic header file */
int main(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	60 97       	sbiw	r28, 0x10	; 16
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
 uint16 distance;
 LCD_init();
    20e2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <LCD_init>
 Ultrasonic_init();
    20e6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Ultrasonic_init>
 sei(); //enable interrupts
    20ea:	78 94       	sei
while(1)
{
	distance=(uint16)(Ultrasonic_readDistance())/(58);
    20ec:	0e 94 4a 07 	call	0xe94	; 0xe94 <Ultrasonic_readDistance>
    20f0:	2a e3       	ldi	r18, 0x3A	; 58
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	b9 01       	movw	r22, r18
    20f6:	0e 94 10 11 	call	0x2220	; 0x2220 <__udivmodhi4>
    20fa:	cb 01       	movw	r24, r22
    20fc:	98 8b       	std	Y+16, r25	; 0x10
    20fe:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_moveCursor(0,1);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <LCD_moveCursor>
	LCD_displayString("Distance= ");
    2108:	80 e6       	ldi	r24, 0x60	; 96
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayString>
	if(distance>100)
    2110:	8f 85       	ldd	r24, Y+15	; 0x0f
    2112:	98 89       	ldd	r25, Y+16	; 0x10
    2114:	85 36       	cpi	r24, 0x65	; 101
    2116:	91 05       	cpc	r25, r1
    2118:	28 f0       	brcs	.+10     	; 0x2124 <main+0x56>
	{
    LCD_intgerToString(distance);
    211a:	8f 85       	ldd	r24, Y+15	; 0x0f
    211c:	98 89       	ldd	r25, Y+16	; 0x10
    211e:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_intgerToString>
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <main+0x64>
	}
	else
	{
		LCD_intgerToString(distance);
    2124:	8f 85       	ldd	r24, Y+15	; 0x0f
    2126:	98 89       	ldd	r25, Y+16	; 0x10
    2128:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_intgerToString>
		LCD_displayCharacter(' ');
    212c:	80 e2       	ldi	r24, 0x20	; 32
    212e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <LCD_displayCharacter>
	}
	LCD_displayString("cm");
    2132:	8b e6       	ldi	r24, 0x6B	; 107
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayString>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a8 ec       	ldi	r26, 0xC8	; 200
    2140:	b2 e4       	ldi	r27, 0x42	; 66
    2142:	8b 87       	std	Y+11, r24	; 0x0b
    2144:	9c 87       	std	Y+12, r25	; 0x0c
    2146:	ad 87       	std	Y+13, r26	; 0x0d
    2148:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	6b 85       	ldd	r22, Y+11	; 0x0b
    214c:	7c 85       	ldd	r23, Y+12	; 0x0c
    214e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2150:	9e 85       	ldd	r25, Y+14	; 0x0e
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a e7       	ldi	r20, 0x7A	; 122
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8f 83       	std	Y+7, r24	; 0x07
    2164:	98 87       	std	Y+8, r25	; 0x08
    2166:	a9 87       	std	Y+9, r26	; 0x09
    2168:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <main+0xbe>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	3f c0       	rjmp	.+126    	; 0x220a <main+0x13c>
	else if (__tmp > 65535)
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <main+0x11e>
    21ce:	89 e1       	ldi	r24, 0x19	; 25
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <main+0x10c>
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <main+0x100>
    21f4:	7b cf       	rjmp	.-266    	; 0x20ec <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <main+0x148>
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	66 cf       	rjmp	.-308    	; 0x20ec <main+0x1e>

00002220 <__udivmodhi4>:
    2220:	aa 1b       	sub	r26, r26
    2222:	bb 1b       	sub	r27, r27
    2224:	51 e1       	ldi	r21, 0x11	; 17
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__udivmodhi4_ep>

00002228 <__udivmodhi4_loop>:
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	a6 17       	cp	r26, r22
    222e:	b7 07       	cpc	r27, r23
    2230:	10 f0       	brcs	.+4      	; 0x2236 <__udivmodhi4_ep>
    2232:	a6 1b       	sub	r26, r22
    2234:	b7 0b       	sbc	r27, r23

00002236 <__udivmodhi4_ep>:
    2236:	88 1f       	adc	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	5a 95       	dec	r21
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__udivmodhi4_loop>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	08 95       	ret

00002248 <__prologue_saves__>:
    2248:	2f 92       	push	r2
    224a:	3f 92       	push	r3
    224c:	4f 92       	push	r4
    224e:	5f 92       	push	r5
    2250:	6f 92       	push	r6
    2252:	7f 92       	push	r7
    2254:	8f 92       	push	r8
    2256:	9f 92       	push	r9
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	ca 1b       	sub	r28, r26
    2272:	db 0b       	sbc	r29, r27
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	09 94       	ijmp

00002280 <__epilogue_restores__>:
    2280:	2a 88       	ldd	r2, Y+18	; 0x12
    2282:	39 88       	ldd	r3, Y+17	; 0x11
    2284:	48 88       	ldd	r4, Y+16	; 0x10
    2286:	5f 84       	ldd	r5, Y+15	; 0x0f
    2288:	6e 84       	ldd	r6, Y+14	; 0x0e
    228a:	7d 84       	ldd	r7, Y+13	; 0x0d
    228c:	8c 84       	ldd	r8, Y+12	; 0x0c
    228e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2290:	aa 84       	ldd	r10, Y+10	; 0x0a
    2292:	b9 84       	ldd	r11, Y+9	; 0x09
    2294:	c8 84       	ldd	r12, Y+8	; 0x08
    2296:	df 80       	ldd	r13, Y+7	; 0x07
    2298:	ee 80       	ldd	r14, Y+6	; 0x06
    229a:	fd 80       	ldd	r15, Y+5	; 0x05
    229c:	0c 81       	ldd	r16, Y+4	; 0x04
    229e:	1b 81       	ldd	r17, Y+3	; 0x03
    22a0:	aa 81       	ldd	r26, Y+2	; 0x02
    22a2:	b9 81       	ldd	r27, Y+1	; 0x01
    22a4:	ce 0f       	add	r28, r30
    22a6:	d1 1d       	adc	r29, r1
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	ed 01       	movw	r28, r26
    22b4:	08 95       	ret

000022b6 <itoa>:
    22b6:	fb 01       	movw	r30, r22
    22b8:	9f 01       	movw	r18, r30
    22ba:	e8 94       	clt
    22bc:	42 30       	cpi	r20, 0x02	; 2
    22be:	c4 f0       	brlt	.+48     	; 0x22f0 <itoa+0x3a>
    22c0:	45 32       	cpi	r20, 0x25	; 37
    22c2:	b4 f4       	brge	.+44     	; 0x22f0 <itoa+0x3a>
    22c4:	4a 30       	cpi	r20, 0x0A	; 10
    22c6:	29 f4       	brne	.+10     	; 0x22d2 <itoa+0x1c>
    22c8:	97 fb       	bst	r25, 7
    22ca:	1e f4       	brtc	.+6      	; 0x22d2 <itoa+0x1c>
    22cc:	90 95       	com	r25
    22ce:	81 95       	neg	r24
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	64 2f       	mov	r22, r20
    22d4:	77 27       	eor	r23, r23
    22d6:	0e 94 10 11 	call	0x2220	; 0x2220 <__udivmodhi4>
    22da:	80 5d       	subi	r24, 0xD0	; 208
    22dc:	8a 33       	cpi	r24, 0x3A	; 58
    22de:	0c f0       	brlt	.+2      	; 0x22e2 <itoa+0x2c>
    22e0:	89 5d       	subi	r24, 0xD9	; 217
    22e2:	81 93       	st	Z+, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	a1 f7       	brne	.-24     	; 0x22d2 <itoa+0x1c>
    22ea:	16 f4       	brtc	.+4      	; 0x22f0 <itoa+0x3a>
    22ec:	5d e2       	ldi	r21, 0x2D	; 45
    22ee:	51 93       	st	Z+, r21
    22f0:	10 82       	st	Z, r1
    22f2:	c9 01       	movw	r24, r18
    22f4:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <strrev>

000022f8 <strrev>:
    22f8:	dc 01       	movw	r26, r24
    22fa:	fc 01       	movw	r30, r24
    22fc:	67 2f       	mov	r22, r23
    22fe:	71 91       	ld	r23, Z+
    2300:	77 23       	and	r23, r23
    2302:	e1 f7       	brne	.-8      	; 0x22fc <strrev+0x4>
    2304:	32 97       	sbiw	r30, 0x02	; 2
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <strrev+0x18>
    2308:	7c 91       	ld	r23, X
    230a:	6d 93       	st	X+, r22
    230c:	70 83       	st	Z, r23
    230e:	62 91       	ld	r22, -Z
    2310:	ae 17       	cp	r26, r30
    2312:	bf 07       	cpc	r27, r31
    2314:	c8 f3       	brcs	.-14     	; 0x2308 <strrev+0x10>
    2316:	08 95       	ret

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
